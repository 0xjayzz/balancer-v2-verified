/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import {TypedEventFilter, TypedEvent, TypedListener} from "./commons";

interface TimelockAuthorizerMigratorInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EVERYWHERE()": FunctionFragment;
    "GRANT_PERMISSION_ACTION_ID()": FunctionFragment;
    "REVOKE_PERMISSION_ACTION_ID()": FunctionFragment;
    "migrate(uint256)": FunctionFragment;
    "migratedRoles()": FunctionFragment;
    "newAuthorizer()": FunctionFragment;
    "oldAuthorizer()": FunctionFragment;
    "rolesData(uint256)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVERYWHERE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRANT_PERMISSION_ACTION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVOKE_PERMISSION_ACTION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migratedRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rolesData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EVERYWHERE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GRANT_PERMISSION_ACTION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVOKE_PERMISSION_ACTION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migratedRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rolesData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export class TimelockAuthorizerMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TimelockAuthorizerMigratorInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EVERYWHERE(overrides?: CallOverrides): Promise<[string]>;

    GRANT_PERMISSION_ACTION_ID(overrides?: CallOverrides): Promise<[string]>;

    REVOKE_PERMISSION_ACTION_ID(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      n: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    migratedRoles(overrides?: CallOverrides): Promise<[BigNumber]>;

    newAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    oldAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    rolesData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & {role: string; target: string}>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EVERYWHERE(overrides?: CallOverrides): Promise<string>;

  GRANT_PERMISSION_ACTION_ID(overrides?: CallOverrides): Promise<string>;

  REVOKE_PERMISSION_ACTION_ID(overrides?: CallOverrides): Promise<string>;

  migrate(
    n: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  migratedRoles(overrides?: CallOverrides): Promise<BigNumber>;

  newAuthorizer(overrides?: CallOverrides): Promise<string>;

  oldAuthorizer(overrides?: CallOverrides): Promise<string>;

  rolesData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & {role: string; target: string}>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EVERYWHERE(overrides?: CallOverrides): Promise<string>;

    GRANT_PERMISSION_ACTION_ID(overrides?: CallOverrides): Promise<string>;

    REVOKE_PERMISSION_ACTION_ID(overrides?: CallOverrides): Promise<string>;

    migrate(n: BigNumberish, overrides?: CallOverrides): Promise<void>;

    migratedRoles(overrides?: CallOverrides): Promise<BigNumber>;

    newAuthorizer(overrides?: CallOverrides): Promise<string>;

    oldAuthorizer(overrides?: CallOverrides): Promise<string>;

    rolesData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & {role: string; target: string}>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EVERYWHERE(overrides?: CallOverrides): Promise<BigNumber>;

    GRANT_PERMISSION_ACTION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    REVOKE_PERMISSION_ACTION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      n: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    migratedRoles(overrides?: CallOverrides): Promise<BigNumber>;

    newAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    oldAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    rolesData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVERYWHERE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRANT_PERMISSION_ACTION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVOKE_PERMISSION_ACTION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      n: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    migratedRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rolesData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
