/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import {TypedEventFilter, TypedEvent, TypedListener} from "./commons";

interface SingleRecipientGaugeFactoryInterface extends ethers.utils.Interface {
  functions: {
    "create(address)": FunctionFragment;
    "getGaugeImplementation()": FunctionFragment;
    "getGaugeRecipient(address)": FunctionFragment;
    "getRecipientGauge(address)": FunctionFragment;
    "isGaugeFromFactory(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "create", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getGaugeImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGaugeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientGauge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGaugeFromFactory",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGaugeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGaugeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGaugeFromFactory",
    data: BytesLike
  ): Result;

  events: {
    "SingleRecipientGaugeCreated(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "SingleRecipientGaugeCreated"
  ): EventFragment;
}

export class SingleRecipientGaugeFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SingleRecipientGaugeFactoryInterface;

  functions: {
    create(
      recipient: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    getGaugeImplementation(overrides?: CallOverrides): Promise<[string]>;

    getGaugeRecipient(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecipientGauge(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isGaugeFromFactory(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  create(
    recipient: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  getGaugeImplementation(overrides?: CallOverrides): Promise<string>;

  getGaugeRecipient(gauge: string, overrides?: CallOverrides): Promise<string>;

  getRecipientGauge(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isGaugeFromFactory(
    gauge: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    create(recipient: string, overrides?: CallOverrides): Promise<string>;

    getGaugeImplementation(overrides?: CallOverrides): Promise<string>;

    getGaugeRecipient(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecipientGauge(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isGaugeFromFactory(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    SingleRecipientGaugeCreated(
      gauge?: string | null,
      recipient?: string | null
    ): TypedEventFilter<[string, string], {gauge: string; recipient: string}>;
  };

  estimateGas: {
    create(
      recipient: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    getGaugeImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getGaugeRecipient(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipientGauge(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGaugeFromFactory(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      recipient: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    getGaugeImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGaugeRecipient(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipientGauge(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGaugeFromFactory(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
