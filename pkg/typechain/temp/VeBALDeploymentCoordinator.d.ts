/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import {TypedEventFilter, TypedEvent, TypedListener} from "./commons";

interface VeBALDeploymentCoordinatorInterface extends ethers.utils.Interface {
  functions: {
    "ARBITRUM_WEIGHT()": FunctionFragment;
    "ETHEREUM_WEIGHT()": FunctionFragment;
    "LM_COMMITTEE_WEIGHT()": FunctionFragment;
    "POLYGON_WEIGHT()": FunctionFragment;
    "VEBAL_WEIGHT()": FunctionFragment;
    "arbitrumGaugeRecipient()": FunctionFragment;
    "firstStageActivationTime()": FunctionFragment;
    "getActivationScheduledTime()": FunctionFragment;
    "getAuthorizer()": FunctionFragment;
    "getAuthorizerAdaptor()": FunctionFragment;
    "getBalancerMinter()": FunctionFragment;
    "getBalancerTokenAdmin()": FunctionFragment;
    "getCurrentDeploymentStage()": FunctionFragment;
    "getGaugeController()": FunctionFragment;
    "getThirdStageDelay()": FunctionFragment;
    "getVault()": FunctionFragment;
    "lmCommitteeMultisig()": FunctionFragment;
    "performFirstStage()": FunctionFragment;
    "performSecondStage()": FunctionFragment;
    "performThirdStage()": FunctionFragment;
    "polygonGaugeRecipient()": FunctionFragment;
    "secondStageActivationTime()": FunctionFragment;
    "thirdStageActivationTime()": FunctionFragment;
    "veBALGaugeRecipient()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ARBITRUM_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETHEREUM_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LM_COMMITTEE_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLYGON_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VEBAL_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrumGaugeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstStageActivationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActivationScheduledTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizerAdaptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancerMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancerTokenAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDeploymentStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGaugeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getThirdStageDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lmCommitteeMultisig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performFirstStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performSecondStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performThirdStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "polygonGaugeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondStageActivationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thirdStageActivationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "veBALGaugeRecipient",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ARBITRUM_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETHEREUM_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LM_COMMITTEE_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLYGON_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VEBAL_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrumGaugeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstStageActivationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivationScheduledTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizerAdaptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancerMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancerTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDeploymentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGaugeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThirdStageDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lmCommitteeMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performFirstStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performSecondStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performThirdStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "polygonGaugeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondStageActivationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thirdStageActivationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "veBALGaugeRecipient",
    data: BytesLike
  ): Result;

  events: {};
}

export class VeBALDeploymentCoordinator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VeBALDeploymentCoordinatorInterface;

  functions: {
    ARBITRUM_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ETHEREUM_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    LM_COMMITTEE_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    POLYGON_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    VEBAL_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    arbitrumGaugeRecipient(overrides?: CallOverrides): Promise<[string]>;

    firstStageActivationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getActivationScheduledTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    getAuthorizerAdaptor(overrides?: CallOverrides): Promise<[string]>;

    getBalancerMinter(overrides?: CallOverrides): Promise<[string]>;

    getBalancerTokenAdmin(overrides?: CallOverrides): Promise<[string]>;

    getCurrentDeploymentStage(overrides?: CallOverrides): Promise<[number]>;

    getGaugeController(overrides?: CallOverrides): Promise<[string]>;

    getThirdStageDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    lmCommitteeMultisig(overrides?: CallOverrides): Promise<[string]>;

    performFirstStage(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    performSecondStage(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    performThirdStage(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    polygonGaugeRecipient(overrides?: CallOverrides): Promise<[string]>;

    secondStageActivationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    thirdStageActivationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    veBALGaugeRecipient(overrides?: CallOverrides): Promise<[string]>;
  };

  ARBITRUM_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  ETHEREUM_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  LM_COMMITTEE_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  POLYGON_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  VEBAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  arbitrumGaugeRecipient(overrides?: CallOverrides): Promise<string>;

  firstStageActivationTime(overrides?: CallOverrides): Promise<BigNumber>;

  getActivationScheduledTime(overrides?: CallOverrides): Promise<BigNumber>;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  getAuthorizerAdaptor(overrides?: CallOverrides): Promise<string>;

  getBalancerMinter(overrides?: CallOverrides): Promise<string>;

  getBalancerTokenAdmin(overrides?: CallOverrides): Promise<string>;

  getCurrentDeploymentStage(overrides?: CallOverrides): Promise<number>;

  getGaugeController(overrides?: CallOverrides): Promise<string>;

  getThirdStageDelay(overrides?: CallOverrides): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  lmCommitteeMultisig(overrides?: CallOverrides): Promise<string>;

  performFirstStage(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  performSecondStage(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  performThirdStage(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  polygonGaugeRecipient(overrides?: CallOverrides): Promise<string>;

  secondStageActivationTime(overrides?: CallOverrides): Promise<BigNumber>;

  thirdStageActivationTime(overrides?: CallOverrides): Promise<BigNumber>;

  veBALGaugeRecipient(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ARBITRUM_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    ETHEREUM_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    LM_COMMITTEE_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    POLYGON_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    VEBAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    arbitrumGaugeRecipient(overrides?: CallOverrides): Promise<string>;

    firstStageActivationTime(overrides?: CallOverrides): Promise<BigNumber>;

    getActivationScheduledTime(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    getAuthorizerAdaptor(overrides?: CallOverrides): Promise<string>;

    getBalancerMinter(overrides?: CallOverrides): Promise<string>;

    getBalancerTokenAdmin(overrides?: CallOverrides): Promise<string>;

    getCurrentDeploymentStage(overrides?: CallOverrides): Promise<number>;

    getGaugeController(overrides?: CallOverrides): Promise<string>;

    getThirdStageDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    lmCommitteeMultisig(overrides?: CallOverrides): Promise<string>;

    performFirstStage(overrides?: CallOverrides): Promise<void>;

    performSecondStage(overrides?: CallOverrides): Promise<void>;

    performThirdStage(overrides?: CallOverrides): Promise<void>;

    polygonGaugeRecipient(overrides?: CallOverrides): Promise<string>;

    secondStageActivationTime(overrides?: CallOverrides): Promise<BigNumber>;

    thirdStageActivationTime(overrides?: CallOverrides): Promise<BigNumber>;

    veBALGaugeRecipient(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ARBITRUM_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    ETHEREUM_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    LM_COMMITTEE_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    POLYGON_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    VEBAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    arbitrumGaugeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    firstStageActivationTime(overrides?: CallOverrides): Promise<BigNumber>;

    getActivationScheduledTime(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizerAdaptor(overrides?: CallOverrides): Promise<BigNumber>;

    getBalancerMinter(overrides?: CallOverrides): Promise<BigNumber>;

    getBalancerTokenAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDeploymentStage(overrides?: CallOverrides): Promise<BigNumber>;

    getGaugeController(overrides?: CallOverrides): Promise<BigNumber>;

    getThirdStageDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    lmCommitteeMultisig(overrides?: CallOverrides): Promise<BigNumber>;

    performFirstStage(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    performSecondStage(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    performThirdStage(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    polygonGaugeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    secondStageActivationTime(overrides?: CallOverrides): Promise<BigNumber>;

    thirdStageActivationTime(overrides?: CallOverrides): Promise<BigNumber>;

    veBALGaugeRecipient(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ARBITRUM_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETHEREUM_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LM_COMMITTEE_WEIGHT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POLYGON_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VEBAL_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitrumGaugeRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstStageActivationTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActivationScheduledTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuthorizerAdaptor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalancerMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalancerTokenAdmin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDeploymentStage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGaugeController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThirdStageDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lmCommitteeMultisig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performFirstStage(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    performSecondStage(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    performThirdStage(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    polygonGaugeRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondStageActivationTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thirdStageActivationTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veBALGaugeRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
