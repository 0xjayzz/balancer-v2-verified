/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import {TypedEventFilter, TypedEvent, TypedListener} from "./commons";

interface BalancerTokenAdminInterface extends ethers.utils.Interface {
  functions: {
    "INITIAL_RATE()": FunctionFragment;
    "RATE_DENOMINATOR()": FunctionFragment;
    "RATE_REDUCTION_COEFFICIENT()": FunctionFragment;
    "RATE_REDUCTION_TIME()": FunctionFragment;
    "activate()": FunctionFragment;
    "available_supply()": FunctionFragment;
    "futureEpochTimeWrite()": FunctionFragment;
    "future_epoch_time_write()": FunctionFragment;
    "getActionId(bytes4)": FunctionFragment;
    "getAuthorizer()": FunctionFragment;
    "getAvailableSupply()": FunctionFragment;
    "getBalancerToken()": FunctionFragment;
    "getFutureEpochTime()": FunctionFragment;
    "getInflationRate()": FunctionFragment;
    "getMiningEpoch()": FunctionFragment;
    "getStartEpochSupply()": FunctionFragment;
    "getStartEpochTime()": FunctionFragment;
    "getVault()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintableInTimeframe(uint256,uint256)": FunctionFragment;
    "mintable_in_timeframe(uint256,uint256)": FunctionFragment;
    "rate()": FunctionFragment;
    "snapshot()": FunctionFragment;
    "startEpochTimeWrite()": FunctionFragment;
    "start_epoch_time_write()": FunctionFragment;
    "updateMiningParameters()": FunctionFragment;
    "update_mining_parameters()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INITIAL_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATE_REDUCTION_COEFFICIENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATE_REDUCTION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "available_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "futureEpochTimeWrite",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time_write",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFutureEpochTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInflationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStartEpochSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStartEpochTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintableInTimeframe",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintable_in_timeframe",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(functionFragment: "snapshot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startEpochTimeWrite",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start_epoch_time_write",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMiningParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "update_mining_parameters",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "INITIAL_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RATE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RATE_REDUCTION_COEFFICIENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RATE_REDUCTION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "available_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureEpochTimeWrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFutureEpochTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInflationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiningEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartEpochSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartEpochTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintableInTimeframe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintable_in_timeframe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startEpochTimeWrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "start_epoch_time_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMiningParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_mining_parameters",
    data: BytesLike
  ): Result;

  events: {
    "MiningParametersUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MiningParametersUpdated"): EventFragment;
}

export class BalancerTokenAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BalancerTokenAdminInterface;

  functions: {
    INITIAL_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    RATE_REDUCTION_COEFFICIENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    RATE_REDUCTION_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    activate(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    available_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    futureEpochTimeWrite(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    future_epoch_time_write(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    getAvailableSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalancerToken(overrides?: CallOverrides): Promise<[string]>;

    getFutureEpochTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInflationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMiningEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStartEpochSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStartEpochTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    mintableInTimeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintable_in_timeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    snapshot(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    startEpochTimeWrite(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    start_epoch_time_write(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    updateMiningParameters(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    update_mining_parameters(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  INITIAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  RATE_REDUCTION_COEFFICIENT(overrides?: CallOverrides): Promise<BigNumber>;

  RATE_REDUCTION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  activate(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  available_supply(overrides?: CallOverrides): Promise<BigNumber>;

  futureEpochTimeWrite(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  future_epoch_time_write(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  getActionId(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  getAvailableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getBalancerToken(overrides?: CallOverrides): Promise<string>;

  getFutureEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

  getInflationRate(overrides?: CallOverrides): Promise<BigNumber>;

  getMiningEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getStartEpochSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getStartEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  mintableInTimeframe(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintable_in_timeframe(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  snapshot(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  startEpochTimeWrite(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  start_epoch_time_write(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  updateMiningParameters(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  update_mining_parameters(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    INITIAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_REDUCTION_COEFFICIENT(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_REDUCTION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    activate(overrides?: CallOverrides): Promise<void>;

    available_supply(overrides?: CallOverrides): Promise<BigNumber>;

    futureEpochTimeWrite(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time_write(overrides?: CallOverrides): Promise<BigNumber>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    getAvailableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getBalancerToken(overrides?: CallOverrides): Promise<string>;

    getFutureEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

    getInflationRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMiningEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getStartEpochSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getStartEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintableInTimeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintable_in_timeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    snapshot(overrides?: CallOverrides): Promise<void>;

    startEpochTimeWrite(overrides?: CallOverrides): Promise<BigNumber>;

    start_epoch_time_write(overrides?: CallOverrides): Promise<BigNumber>;

    updateMiningParameters(overrides?: CallOverrides): Promise<void>;

    update_mining_parameters(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    MiningParametersUpdated(
      rate?: null,
      supply?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {rate: BigNumber; supply: BigNumber}
    >;
  };

  estimateGas: {
    INITIAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_REDUCTION_COEFFICIENT(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_REDUCTION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    activate(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    available_supply(overrides?: CallOverrides): Promise<BigNumber>;

    futureEpochTimeWrite(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    future_epoch_time_write(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getBalancerToken(overrides?: CallOverrides): Promise<BigNumber>;

    getFutureEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

    getInflationRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMiningEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getStartEpochSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getStartEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    mintableInTimeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintable_in_timeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    snapshot(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    startEpochTimeWrite(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    start_epoch_time_write(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    updateMiningParameters(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    update_mining_parameters(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INITIAL_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATE_REDUCTION_COEFFICIENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RATE_REDUCTION_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activate(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    available_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    futureEpochTimeWrite(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    future_epoch_time_write(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalancerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFutureEpochTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInflationRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMiningEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStartEpochSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStartEpochTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    mintableInTimeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintable_in_timeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    snapshot(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    startEpochTimeWrite(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    start_epoch_time_write(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    updateMiningParameters(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    update_mining_parameters(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
