/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import {TypedEventFilter, TypedEvent, TypedListener} from "./commons";

interface TimelockAuthorizerInterface extends ethers.utils.Interface {
  functions: {
    "EVERYWHERE()": FunctionFragment;
    "GRANT_ACTION_ID()": FunctionFragment;
    "MAX_DELAY()": FunctionFragment;
    "REVOKE_ACTION_ID()": FunctionFragment;
    "SCHEDULE_DELAY_ACTION_ID()": FunctionFragment;
    "canPerform(bytes32,address,address)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "delaysPerActionId(bytes32)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getActionId(bytes4)": FunctionFragment;
    "grantPermissions(bytes32[],address,address[])": FunctionFragment;
    "hasPermission(bytes32,address,address)": FunctionFragment;
    "isPermissionGranted(bytes32)": FunctionFragment;
    "permissionId(bytes32,address,address)": FunctionFragment;
    "renouncePermissions(bytes32[],address[])": FunctionFragment;
    "revokePermissions(bytes32[],address,address[])": FunctionFragment;
    "schedule(address,bytes,address[])": FunctionFragment;
    "scheduleDelayChange(bytes32,uint256,address[])": FunctionFragment;
    "scheduleGrantPermission(bytes32,address,address,address[])": FunctionFragment;
    "scheduleRevokePermission(bytes32,address,address,address[])": FunctionFragment;
    "scheduledActions(uint256)": FunctionFragment;
    "setDelay(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EVERYWHERE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRANT_ACTION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REVOKE_ACTION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCHEDULE_DELAY_ACTION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delaysPerActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermissions",
    values: [BytesLike[], string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionGranted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionId",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePermissions",
    values: [BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermissions",
    values: [BytesLike[], string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "schedule",
    values: [string, BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleDelayChange",
    values: [BytesLike, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleGrantPermission",
    values: [BytesLike, string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleRevokePermission",
    values: [BytesLike, string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduledActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "EVERYWHERE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GRANT_ACTION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REVOKE_ACTION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SCHEDULE_DELAY_ACTION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delaysPerActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionGranted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scheduleDelayChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleGrantPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleRevokePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduledActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;

  events: {
    "ActionCancelled(uint256)": EventFragment;
    "ActionDelaySet(bytes32,uint256)": EventFragment;
    "ActionExecuted(uint256)": EventFragment;
    "ActionScheduled(bytes32,uint256)": EventFragment;
    "PermissionGranted(bytes32,address,address)": EventFragment;
    "PermissionRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActionDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActionScheduled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionRevoked"): EventFragment;
}

export class TimelockAuthorizer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TimelockAuthorizerInterface;

  functions: {
    EVERYWHERE(overrides?: CallOverrides): Promise<[string]>;

    GRANT_ACTION_ID(overrides?: CallOverrides): Promise<[string]>;

    MAX_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    REVOKE_ACTION_ID(overrides?: CallOverrides): Promise<[string]>;

    SCHEDULE_DELAY_ACTION_ID(overrides?: CallOverrides): Promise<[string]>;

    canPerform(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancel(
      scheduledActionId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    delaysPerActionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    execute(
      scheduledActionId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantPermissions(
      actionIds: BytesLike[],
      account: string,
      where: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    hasPermission(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPermissionGranted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    permissionId(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renouncePermissions(
      actionIds: BytesLike[],
      where: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    revokePermissions(
      actionIds: BytesLike[],
      account: string,
      where: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    schedule(
      where: string,
      data: BytesLike,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    scheduleDelayChange(
      actionId: BytesLike,
      newDelay: BigNumberish,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    scheduleGrantPermission(
      actionId: BytesLike,
      account: string,
      where: string,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    scheduleRevokePermission(
      actionId: BytesLike,
      account: string,
      where: string,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    scheduledActions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, boolean, boolean, BigNumber] & {
        where: string;
        data: string;
        executed: boolean;
        cancelled: boolean;
        protected: boolean;
        executableAt: BigNumber;
      }
    >;

    setDelay(
      actionId: BytesLike,
      delay: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  EVERYWHERE(overrides?: CallOverrides): Promise<string>;

  GRANT_ACTION_ID(overrides?: CallOverrides): Promise<string>;

  MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  REVOKE_ACTION_ID(overrides?: CallOverrides): Promise<string>;

  SCHEDULE_DELAY_ACTION_ID(overrides?: CallOverrides): Promise<string>;

  canPerform(
    actionId: BytesLike,
    account: string,
    where: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancel(
    scheduledActionId: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  delaysPerActionId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  execute(
    scheduledActionId: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  getActionId(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantPermissions(
    actionIds: BytesLike[],
    account: string,
    where: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  hasPermission(
    actionId: BytesLike,
    account: string,
    where: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPermissionGranted(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  permissionId(
    actionId: BytesLike,
    account: string,
    where: string,
    overrides?: CallOverrides
  ): Promise<string>;

  renouncePermissions(
    actionIds: BytesLike[],
    where: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  revokePermissions(
    actionIds: BytesLike[],
    account: string,
    where: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  schedule(
    where: string,
    data: BytesLike,
    executors: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  scheduleDelayChange(
    actionId: BytesLike,
    newDelay: BigNumberish,
    executors: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  scheduleGrantPermission(
    actionId: BytesLike,
    account: string,
    where: string,
    executors: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  scheduleRevokePermission(
    actionId: BytesLike,
    account: string,
    where: string,
    executors: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  scheduledActions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, boolean, boolean, BigNumber] & {
      where: string;
      data: string;
      executed: boolean;
      cancelled: boolean;
      protected: boolean;
      executableAt: BigNumber;
    }
  >;

  setDelay(
    actionId: BytesLike,
    delay: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    EVERYWHERE(overrides?: CallOverrides): Promise<string>;

    GRANT_ACTION_ID(overrides?: CallOverrides): Promise<string>;

    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    REVOKE_ACTION_ID(overrides?: CallOverrides): Promise<string>;

    SCHEDULE_DELAY_ACTION_ID(overrides?: CallOverrides): Promise<string>;

    canPerform(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancel(
      scheduledActionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delaysPerActionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      scheduledActionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantPermissions(
      actionIds: BytesLike[],
      account: string,
      where: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    hasPermission(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPermissionGranted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permissionId(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renouncePermissions(
      actionIds: BytesLike[],
      where: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokePermissions(
      actionIds: BytesLike[],
      account: string,
      where: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    schedule(
      where: string,
      data: BytesLike,
      executors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleDelayChange(
      actionId: BytesLike,
      newDelay: BigNumberish,
      executors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleGrantPermission(
      actionId: BytesLike,
      account: string,
      where: string,
      executors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleRevokePermission(
      actionId: BytesLike,
      account: string,
      where: string,
      executors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduledActions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, boolean, boolean, BigNumber] & {
        where: string;
        data: string;
        executed: boolean;
        cancelled: boolean;
        protected: boolean;
        executableAt: BigNumber;
      }
    >;

    setDelay(
      actionId: BytesLike,
      delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ActionCancelled(
      scheduledActionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {scheduledActionId: BigNumber}>;

    ActionDelaySet(
      actionId?: BytesLike | null,
      delay?: null
    ): TypedEventFilter<
      [string, BigNumber],
      {actionId: string; delay: BigNumber}
    >;

    ActionExecuted(
      scheduledActionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {scheduledActionId: BigNumber}>;

    ActionScheduled(
      actionId?: BytesLike | null,
      scheduledActionId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      {actionId: string; scheduledActionId: BigNumber}
    >;

    PermissionGranted(
      actionId?: BytesLike | null,
      account?: string | null,
      where?: string | null
    ): TypedEventFilter<
      [string, string, string],
      {actionId: string; account: string; where: string}
    >;

    PermissionRevoked(
      actionId?: BytesLike | null,
      account?: string | null,
      where?: string | null
    ): TypedEventFilter<
      [string, string, string],
      {actionId: string; account: string; where: string}
    >;
  };

  estimateGas: {
    EVERYWHERE(overrides?: CallOverrides): Promise<BigNumber>;

    GRANT_ACTION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    REVOKE_ACTION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    SCHEDULE_DELAY_ACTION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    canPerform(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      scheduledActionId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    delaysPerActionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      scheduledActionId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantPermissions(
      actionIds: BytesLike[],
      account: string,
      where: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    hasPermission(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPermissionGranted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permissionId(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renouncePermissions(
      actionIds: BytesLike[],
      where: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    revokePermissions(
      actionIds: BytesLike[],
      account: string,
      where: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    schedule(
      where: string,
      data: BytesLike,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    scheduleDelayChange(
      actionId: BytesLike,
      newDelay: BigNumberish,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    scheduleGrantPermission(
      actionId: BytesLike,
      account: string,
      where: string,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    scheduleRevokePermission(
      actionId: BytesLike,
      account: string,
      where: string,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    scheduledActions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDelay(
      actionId: BytesLike,
      delay: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EVERYWHERE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRANT_ACTION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVOKE_ACTION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCHEDULE_DELAY_ACTION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      scheduledActionId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    delaysPerActionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      scheduledActionId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantPermissions(
      actionIds: BytesLike[],
      account: string,
      where: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    hasPermission(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPermissionGranted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissionId(
      actionId: BytesLike,
      account: string,
      where: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renouncePermissions(
      actionIds: BytesLike[],
      where: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    revokePermissions(
      actionIds: BytesLike[],
      account: string,
      where: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    schedule(
      where: string,
      data: BytesLike,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    scheduleDelayChange(
      actionId: BytesLike,
      newDelay: BigNumberish,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    scheduleGrantPermission(
      actionId: BytesLike,
      account: string,
      where: string,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    scheduleRevokePermission(
      actionId: BytesLike,
      account: string,
      where: string,
      executors: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    scheduledActions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDelay(
      actionId: BytesLike,
      delay: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
