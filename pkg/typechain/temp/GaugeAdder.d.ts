/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import {TypedEventFilter, TypedEvent, TypedListener} from "./commons";

interface GaugeAdderInterface extends ethers.utils.Interface {
  functions: {
    "addArbitrumGauge(address)": FunctionFragment;
    "addEthereumGauge(address)": FunctionFragment;
    "addGaugeFactory(address,uint8)": FunctionFragment;
    "addPolygonGauge(address)": FunctionFragment;
    "getActionId(bytes4)": FunctionFragment;
    "getAuthorizer()": FunctionFragment;
    "getAuthorizerAdaptor()": FunctionFragment;
    "getFactoryForGaugeType(uint8,uint256)": FunctionFragment;
    "getFactoryForGaugeTypeCount(uint8)": FunctionFragment;
    "getGaugeController()": FunctionFragment;
    "getPoolGauge(address)": FunctionFragment;
    "getVault()": FunctionFragment;
    "isGaugeFromValidFactory(address,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addArbitrumGauge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addEthereumGauge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addGaugeFactory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPolygonGauge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizerAdaptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryForGaugeType",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryForGaugeTypeCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGaugeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolGauge",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isGaugeFromValidFactory",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addArbitrumGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEthereumGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGaugeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPolygonGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizerAdaptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryForGaugeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryForGaugeTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGaugeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGaugeFromValidFactory",
    data: BytesLike
  ): Result;

  events: {
    "GaugeFactoryAdded(uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GaugeFactoryAdded"): EventFragment;
}

export class GaugeAdder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GaugeAdderInterface;

  functions: {
    addArbitrumGauge(
      rootGauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    addEthereumGauge(
      gauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    addGaugeFactory(
      factory: string,
      gaugeType: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    addPolygonGauge(
      rootGauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    getAuthorizerAdaptor(overrides?: CallOverrides): Promise<[string]>;

    getFactoryForGaugeType(
      gaugeType: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFactoryForGaugeTypeCount(
      gaugeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGaugeController(overrides?: CallOverrides): Promise<[string]>;

    getPoolGauge(pool: string, overrides?: CallOverrides): Promise<[string]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    isGaugeFromValidFactory(
      gauge: string,
      gaugeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addArbitrumGauge(
    rootGauge: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  addEthereumGauge(
    gauge: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  addGaugeFactory(
    factory: string,
    gaugeType: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  addPolygonGauge(
    rootGauge: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  getActionId(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  getAuthorizerAdaptor(overrides?: CallOverrides): Promise<string>;

  getFactoryForGaugeType(
    gaugeType: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getFactoryForGaugeTypeCount(
    gaugeType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGaugeController(overrides?: CallOverrides): Promise<string>;

  getPoolGauge(pool: string, overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  isGaugeFromValidFactory(
    gauge: string,
    gaugeType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addArbitrumGauge(
      rootGauge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addEthereumGauge(gauge: string, overrides?: CallOverrides): Promise<void>;

    addGaugeFactory(
      factory: string,
      gaugeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addPolygonGauge(
      rootGauge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    getAuthorizerAdaptor(overrides?: CallOverrides): Promise<string>;

    getFactoryForGaugeType(
      gaugeType: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFactoryForGaugeTypeCount(
      gaugeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGaugeController(overrides?: CallOverrides): Promise<string>;

    getPoolGauge(pool: string, overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    isGaugeFromValidFactory(
      gauge: string,
      gaugeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    GaugeFactoryAdded(
      gaugeType?: BigNumberish | null,
      gaugeFactory?: null
    ): TypedEventFilter<
      [number, string],
      {gaugeType: number; gaugeFactory: string}
    >;
  };

  estimateGas: {
    addArbitrumGauge(
      rootGauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    addEthereumGauge(
      gauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    addGaugeFactory(
      factory: string,
      gaugeType: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    addPolygonGauge(
      rootGauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizerAdaptor(overrides?: CallOverrides): Promise<BigNumber>;

    getFactoryForGaugeType(
      gaugeType: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFactoryForGaugeTypeCount(
      gaugeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGaugeController(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolGauge(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    isGaugeFromValidFactory(
      gauge: string,
      gaugeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addArbitrumGauge(
      rootGauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    addEthereumGauge(
      gauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    addGaugeFactory(
      factory: string,
      gaugeType: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    addPolygonGauge(
      rootGauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuthorizerAdaptor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFactoryForGaugeType(
      gaugeType: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFactoryForGaugeTypeCount(
      gaugeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGaugeController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolGauge(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGaugeFromValidFactory(
      gauge: string,
      gaugeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
