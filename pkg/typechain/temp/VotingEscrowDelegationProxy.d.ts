/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import {TypedEventFilter, TypedEvent, TypedListener} from "./commons";

interface VotingEscrowDelegationProxyInterface extends ethers.utils.Interface {
  functions: {
    "adjustedBalanceOf(address)": FunctionFragment;
    "adjusted_balance_of(address)": FunctionFragment;
    "getActionId(bytes4)": FunctionFragment;
    "getAuthorizer()": FunctionFragment;
    "getDelegationImplementation()": FunctionFragment;
    "getVault()": FunctionFragment;
    "getVotingEscrow()": FunctionFragment;
    "killDelegation()": FunctionFragment;
    "setDelegation(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adjustedBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adjusted_balance_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVotingEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "killDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegation",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjusted_balance_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "killDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegation",
    data: BytesLike
  ): Result;

  events: {
    "DelegationImplementationUpdated(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DelegationImplementationUpdated"
  ): EventFragment;
}

export class VotingEscrowDelegationProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VotingEscrowDelegationProxyInterface;

  functions: {
    adjustedBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    adjusted_balance_of(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    getDelegationImplementation(overrides?: CallOverrides): Promise<[string]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    getVotingEscrow(overrides?: CallOverrides): Promise<[string]>;

    killDelegation(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setDelegation(
      delegation: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  adjustedBalanceOf(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  adjusted_balance_of(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActionId(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  getDelegationImplementation(overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  getVotingEscrow(overrides?: CallOverrides): Promise<string>;

  killDelegation(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setDelegation(
    delegation: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustedBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjusted_balance_of(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    getDelegationImplementation(overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    getVotingEscrow(overrides?: CallOverrides): Promise<string>;

    killDelegation(overrides?: CallOverrides): Promise<void>;

    setDelegation(delegation: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    DelegationImplementationUpdated(
      newImplementation?: string | null
    ): TypedEventFilter<[string], {newImplementation: string}>;
  };

  estimateGas: {
    adjustedBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjusted_balance_of(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegationImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    killDelegation(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setDelegation(
      delegation: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustedBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adjusted_balance_of(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelegationImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    killDelegation(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setDelegation(
      delegation: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
