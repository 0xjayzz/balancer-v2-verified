/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import {TypedEventFilter, TypedEvent, TypedListener} from "./commons";

interface NoProtocolFeeLiquidityBootstrappingPoolFactoryInterface
  extends ethers.utils.Interface {
  functions: {
    "create(string,string,address[],uint256[],uint256,address,bool)": FunctionFragment;
    "disable()": FunctionFragment;
    "getActionId(bytes4)": FunctionFragment;
    "getCreationCode()": FunctionFragment;
    "getCreationCodeContracts()": FunctionFragment;
    "getPauseConfiguration()": FunctionFragment;
    "getVault()": FunctionFragment;
    "isDisabled()": FunctionFragment;
    "isPoolFromFactory(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      string,
      string[],
      BigNumberish[],
      BigNumberish,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "disable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationCodeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPauseConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolFromFactory",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationCodeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPauseConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDisabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPoolFromFactory",
    data: BytesLike
  ): Result;

  events: {
    "FactoryDisabled()": EventFragment;
    "PoolCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FactoryDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
}

export class NoProtocolFeeLiquidityBootstrappingPoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NoProtocolFeeLiquidityBootstrappingPoolFactoryInterface;

  functions: {
    create(
      name: string,
      symbol: string,
      tokens: string[],
      weights: BigNumberish[],
      swapFeePercentage: BigNumberish,
      owner: string,
      swapEnabledOnStart: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    disable(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreationCode(overrides?: CallOverrides): Promise<[string]>;

    getCreationCodeContracts(
      overrides?: CallOverrides
    ): Promise<[string, string] & {contractA: string; contractB: string}>;

    getPauseConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pauseWindowDuration: BigNumber;
        bufferPeriodDuration: BigNumber;
      }
    >;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    isDisabled(overrides?: CallOverrides): Promise<[boolean]>;

    isPoolFromFactory(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  create(
    name: string,
    symbol: string,
    tokens: string[],
    weights: BigNumberish[],
    swapFeePercentage: BigNumberish,
    owner: string,
    swapEnabledOnStart: boolean,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  disable(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  getActionId(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  getCreationCode(overrides?: CallOverrides): Promise<string>;

  getCreationCodeContracts(
    overrides?: CallOverrides
  ): Promise<[string, string] & {contractA: string; contractB: string}>;

  getPauseConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      pauseWindowDuration: BigNumber;
      bufferPeriodDuration: BigNumber;
    }
  >;

  getVault(overrides?: CallOverrides): Promise<string>;

  isDisabled(overrides?: CallOverrides): Promise<boolean>;

  isPoolFromFactory(pool: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    create(
      name: string,
      symbol: string,
      tokens: string[],
      weights: BigNumberish[],
      swapFeePercentage: BigNumberish,
      owner: string,
      swapEnabledOnStart: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    disable(overrides?: CallOverrides): Promise<void>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreationCode(overrides?: CallOverrides): Promise<string>;

    getCreationCodeContracts(
      overrides?: CallOverrides
    ): Promise<[string, string] & {contractA: string; contractB: string}>;

    getPauseConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pauseWindowDuration: BigNumber;
        bufferPeriodDuration: BigNumber;
      }
    >;

    getVault(overrides?: CallOverrides): Promise<string>;

    isDisabled(overrides?: CallOverrides): Promise<boolean>;

    isPoolFromFactory(
      pool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    FactoryDisabled(): TypedEventFilter<[], {}>;

    PoolCreated(
      pool?: string | null
    ): TypedEventFilter<[string], {pool: string}>;
  };

  estimateGas: {
    create(
      name: string,
      symbol: string,
      tokens: string[],
      weights: BigNumberish[],
      swapFeePercentage: BigNumberish,
      owner: string,
      swapEnabledOnStart: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    disable(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreationCode(overrides?: CallOverrides): Promise<BigNumber>;

    getCreationCodeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getPauseConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    isDisabled(overrides?: CallOverrides): Promise<BigNumber>;

    isPoolFromFactory(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      name: string,
      symbol: string,
      tokens: string[],
      weights: BigNumberish[],
      swapFeePercentage: BigNumberish,
      owner: string,
      swapEnabledOnStart: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    disable(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreationCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreationCodeContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPauseConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDisabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPoolFromFactory(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
