/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import {TypedEventFilter, TypedEvent, TypedListener} from "./commons";

interface BalancerMinterInterface extends ethers.utils.Interface {
  functions: {
    "allowed_to_mint_for(address,address)": FunctionFragment;
    "getBalancerToken()": FunctionFragment;
    "getBalancerTokenAdmin()": FunctionFragment;
    "getDomainSeparator()": FunctionFragment;
    "getGaugeController()": FunctionFragment;
    "getMinterApproval(address,address)": FunctionFragment;
    "getNextNonce(address)": FunctionFragment;
    "mint(address)": FunctionFragment;
    "mintFor(address,address)": FunctionFragment;
    "mintMany(address[])": FunctionFragment;
    "mintManyFor(address[],address)": FunctionFragment;
    "mint_for(address,address)": FunctionFragment;
    "mint_many(address[8])": FunctionFragment;
    "minted(address,address)": FunctionFragment;
    "setMinterApproval(address,bool)": FunctionFragment;
    "setMinterApprovalWithSignature(address,bool,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "toggle_approve_mint(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowed_to_mint_for",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancerTokenAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGaugeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinterApproval",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextNonce",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintFor",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "mintMany", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "mintManyFor",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint_for",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint_many",
    values: [[string, string, string, string, string, string, string, string]]
  ): string;
  encodeFunctionData(
    functionFragment: "minted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinterApproval",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinterApprovalWithSignature",
    values: [
      string,
      boolean,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toggle_approve_mint",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowed_to_mint_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancerTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGaugeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinterApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintManyFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint_for", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint_many", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinterApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinterApprovalWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggle_approve_mint",
    data: BytesLike
  ): Result;

  events: {
    "Minted(address,address,uint256)": EventFragment;
    "MinterApprovalSet(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterApprovalSet"): EventFragment;
}

export class BalancerMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BalancerMinterInterface;

  functions: {
    allowed_to_mint_for(
      minter: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBalancerToken(overrides?: CallOverrides): Promise<[string]>;

    getBalancerTokenAdmin(overrides?: CallOverrides): Promise<[string]>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getGaugeController(overrides?: CallOverrides): Promise<[string]>;

    getMinterApproval(
      minter: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNextNonce(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      gauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    mintFor(
      gauge: string,
      user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    mintMany(
      gauges: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    mintManyFor(
      gauges: string[],
      user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    mint_for(
      gauge: string,
      user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    mint_many(
      gauges: [string, string, string, string, string, string, string, string],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    minted(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMinterApproval(
      minter: string,
      approval: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setMinterApprovalWithSignature(
      minter: string,
      approval: boolean,
      user: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    toggle_approve_mint(
      minter: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  allowed_to_mint_for(
    minter: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBalancerToken(overrides?: CallOverrides): Promise<string>;

  getBalancerTokenAdmin(overrides?: CallOverrides): Promise<string>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getGaugeController(overrides?: CallOverrides): Promise<string>;

  getMinterApproval(
    minter: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNextNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    gauge: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  mintFor(
    gauge: string,
    user: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  mintMany(
    gauges: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  mintManyFor(
    gauges: string[],
    user: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  mint_for(
    gauge: string,
    user: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  mint_many(
    gauges: [string, string, string, string, string, string, string, string],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  minted(
    user: string,
    gauge: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMinterApproval(
    minter: string,
    approval: boolean,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setMinterApprovalWithSignature(
    minter: string,
    approval: boolean,
    user: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  toggle_approve_mint(
    minter: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    allowed_to_mint_for(
      minter: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBalancerToken(overrides?: CallOverrides): Promise<string>;

    getBalancerTokenAdmin(overrides?: CallOverrides): Promise<string>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getGaugeController(overrides?: CallOverrides): Promise<string>;

    getMinterApproval(
      minter: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNextNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(gauge: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintFor(
      gauge: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintMany(gauges: string[], overrides?: CallOverrides): Promise<BigNumber>;

    mintManyFor(
      gauges: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint_for(
      gauge: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mint_many(
      gauges: [string, string, string, string, string, string, string, string],
      overrides?: CallOverrides
    ): Promise<void>;

    minted(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinterApproval(
      minter: string,
      approval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinterApprovalWithSignature(
      minter: string,
      approval: boolean,
      user: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    toggle_approve_mint(
      minter: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Minted(
      recipient?: string | null,
      gauge?: null,
      minted?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {recipient: string; gauge: string; minted: BigNumber}
    >;

    MinterApprovalSet(
      user?: string | null,
      minter?: string | null,
      approval?: null
    ): TypedEventFilter<
      [string, string, boolean],
      {user: string; minter: string; approval: boolean}
    >;
  };

  estimateGas: {
    allowed_to_mint_for(
      minter: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalancerToken(overrides?: CallOverrides): Promise<BigNumber>;

    getBalancerTokenAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getGaugeController(overrides?: CallOverrides): Promise<BigNumber>;

    getMinterApproval(
      minter: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      gauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    mintFor(
      gauge: string,
      user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    mintMany(
      gauges: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    mintManyFor(
      gauges: string[],
      user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    mint_for(
      gauge: string,
      user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    mint_many(
      gauges: [string, string, string, string, string, string, string, string],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    minted(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinterApproval(
      minter: string,
      approval: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setMinterApprovalWithSignature(
      minter: string,
      approval: boolean,
      user: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    toggle_approve_mint(
      minter: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowed_to_mint_for(
      minter: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalancerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalancerTokenAdmin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGaugeController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinterApproval(
      minter: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      gauge: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    mintFor(
      gauge: string,
      user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    mintMany(
      gauges: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    mintManyFor(
      gauges: string[],
      user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    mint_for(
      gauge: string,
      user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    mint_many(
      gauges: [string, string, string, string, string, string, string, string],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    minted(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinterApproval(
      minter: string,
      approval: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setMinterApprovalWithSignature(
      minter: string,
      approval: boolean,
      user: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    toggle_approve_mint(
      minter: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
